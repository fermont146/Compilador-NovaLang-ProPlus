
package ALexico.Visuales;

import ALexico.Tablas.Tablasimbolos;
import static ALexico.Tablas.Tablasimbolos.h;
import static ALexico.Tablas.Tablasimbolos.p;
import ALexico.lexico;
import ASintactico.Analisis;
import ASintactico.Pila;
import Analizadores.Codigo;
import BNF.bnf_inicio;
import java.awt.Color;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.util.*;
import java.util.logging.*;
import java_cup.runtime.Symbol;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import Analizadores.*;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import ALexico.Visuales.*; 
import ASemantico.ASLexer;
import ASemantico.ASParser;
import ASemantico.ASTNode;
 import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.lang.reflect.Field;
import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;
import ASemantico.SemanticAnalyzer;

public class interfaz extends javax.swing.JFrame {

      /** Creates new form interfaz */
        List<identificador> tokenslist; 
        Hashtable cont = new Hashtable();
        int reser=0, op =0 , coment=0,constantes =0, ident=0;
        private String dirNuevo="";
        private String nomNuevo="";
        String direccionARCH;
         
    /**
     * Creates new form interfaz
     */
    public interfaz() {
        initComponents();
        jPanel1.setVisible(false);
//        textolexico.setVisible(false);
        textolexicotxt.setVisible(false);
        textosintactico.setVisible(false);
         textolexicotxt2.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        reservada = new javax.swing.JLabel();
        operadors = new javax.swing.JLabel();
        comentario = new javax.swing.JLabel();
        consta = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        idnt = new javax.swing.JLabel();
        errorsintactico = new javax.swing.JLabel();
        erroressintacticos = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        textolexicotxt2 = new javax.swing.JLabel();
        lblTipoCodigo = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jEditorPane2 = new javax.swing.JEditorPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        qwqw = new javax.swing.JLabel();
        sdsd = new javax.swing.JLabel();
        textolexico2 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        textolexicotxt = new javax.swing.JTextArea();
        textolexico1 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        erroressemanticos = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        textosintactico = new javax.swing.JTextArea();
        textolexico3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Compilar_btn = new javax.swing.JMenuItem();
        Errores_btn = new javax.swing.JMenuItem();
        lexico_btn = new javax.swing.JMenuItem();
        analizadorsemantico = new javax.swing.JMenuItem();
        menuarchivop = new javax.swing.JMenu();
        guardar_btn = new javax.swing.JMenuItem();
        guardacomo_btn = new javax.swing.JMenuItem();
        grd_compi_btn = new javax.swing.JMenuItem();
        abrir_btn = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        limpiar = new javax.swing.JMenuItem();

        jScrollPane2.setViewportView(jEditorPane1);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setIconImages(null);

        reservada.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        reservada.setText("Reservada");

        operadors.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        operadors.setText("Operadores");

        comentario.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        comentario.setText("Comentarios");

        consta.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        consta.setText("Constantes");

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 204));
        jLabel2.setText(" ");

        jLabel4.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 204, 255));
        jLabel4.setText(" ");

        jLabel6.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 153, 153));
        jLabel6.setText(" ");

        jLabel8.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel8.setText(" ");

        jLabel10.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel10.setText(" ");

        idnt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        idnt.setText("Identificadores");

        erroressintacticos.setBackground(new java.awt.Color(255, 255, 255));
        erroressintacticos.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        erroressintacticos.setText(" ");

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Simbolos");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane8.setViewportView(jTable2);

        textolexicotxt2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        lblTipoCodigo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTipoCodigo.setForeground(new java.awt.Color(255, 255, 255));
        lblTipoCodigo.setText("TIPO DE LENGUAJE");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(328, 328, 328)
                        .addComponent(textolexicotxt2))
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTipoCodigo))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textolexicotxt2)
                .addGap(18, 18, 18)
                .addComponent(lblTipoCodigo)
                .addContainerGap(426, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));

        jEditorPane2.setEditable(false);
        jEditorPane2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jEditorPane2.setContentType("text/html"); // NOI18N
        jEditorPane2.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jEditorPane2.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jEditorPane2CaretUpdate(evt);
            }
        });
        jEditorPane2.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jEditorPane2InputMethodTextChanged(evt);
            }
        });
        jEditorPane2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jEditorPane2KeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(jEditorPane2);

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        qwqw.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        qwqw.setForeground(new java.awt.Color(255, 255, 255));
        qwqw.setText("Código Compilado");

        sdsd.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        sdsd.setForeground(new java.awt.Color(255, 255, 255));
        sdsd.setText("Ingrese Código");

        textolexico2.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        textolexico2.setForeground(new java.awt.Color(255, 255, 255));
        textolexico2.setText("Errores Lexicos");

        textolexicotxt.setColumns(20);
        textolexicotxt.setRows(5);
        jScrollPane6.setViewportView(textolexicotxt);

        textolexico1.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        textolexico1.setForeground(new java.awt.Color(255, 255, 255));
        textolexico1.setText("Errores Semánticos");

        erroressemanticos.setColumns(20);
        erroressemanticos.setFont(new java.awt.Font("Monospaced", 3, 18)); // NOI18N
        erroressemanticos.setRows(5);
        jScrollPane7.setViewportView(erroressemanticos);

        textosintactico.setColumns(20);
        textosintactico.setFont(new java.awt.Font("Monospaced", 3, 18)); // NOI18N
        textosintactico.setRows(5);
        jScrollPane5.setViewportView(textosintactico);

        textolexico3.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        textolexico3.setForeground(new java.awt.Color(255, 255, 255));
        textolexico3.setText("Errores Sintacticos");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sdsd))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(qwqw)))
                    .addComponent(jScrollPane6)
                    .addComponent(jScrollPane7)
                    .addComponent(jScrollPane5)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textolexico2, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textolexico1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textolexico3, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(qwqw)
                    .addComponent(sdsd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 646, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textolexico2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textolexico1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textolexico3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        jMenuBar1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        jMenu1.setBackground(new java.awt.Color(153, 153, 255));
        jMenu1.setText("Compilar");
        jMenu1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        Compilar_btn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Compilar_btn.setText("Compilar");
        Compilar_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Compilar_btnActionPerformed(evt);
            }
        });
        jMenu1.add(Compilar_btn);

        Errores_btn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Errores_btn.setText("Errores");
        Errores_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Errores_btnActionPerformed(evt);
            }
        });
        jMenu1.add(Errores_btn);

        lexico_btn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lexico_btn.setText("Analizador Léxico");
        lexico_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lexico_btnActionPerformed(evt);
            }
        });
        jMenu1.add(lexico_btn);

        analizadorsemantico.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        analizadorsemantico.setText("Analizador Semantico");
        analizadorsemantico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analizadorsemanticoActionPerformed(evt);
            }
        });
        jMenu1.add(analizadorsemantico);

        jMenuBar1.add(jMenu1);

        menuarchivop.setText("Archivo");
        menuarchivop.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        guardar_btn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        guardar_btn.setText("Guardar ");
        guardar_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardar_btnActionPerformed(evt);
            }
        });
        menuarchivop.add(guardar_btn);

        guardacomo_btn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        guardacomo_btn.setText("Guardar Como ");
        guardacomo_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardacomo_btnActionPerformed(evt);
            }
        });
        menuarchivop.add(guardacomo_btn);

        grd_compi_btn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        grd_compi_btn.setText("Guardar Compilado");
        grd_compi_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grd_compi_btnActionPerformed(evt);
            }
        });
        menuarchivop.add(grd_compi_btn);

        abrir_btn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        abrir_btn.setText("Abrir Archivo");
        abrir_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrir_btnActionPerformed(evt);
            }
        });
        menuarchivop.add(abrir_btn);

        jMenuItem1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jMenuItem1.setText("Información");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuarchivop.add(jMenuItem1);

        jMenuBar1.add(menuarchivop);

        jMenu7.setText("Limpieza");
        jMenu7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        limpiar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        limpiar.setText("Limpiar Todo");
        limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarActionPerformed(evt);
            }
        });
        jMenu7.add(limpiar);

        jMenuBar1.add(jMenu7);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(reservada)
                        .addGap(28, 28, 28)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(43, 43, 43))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(operadors)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(51, 51, 51))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comentario)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(43, 43, 43))
                    .addComponent(jSeparator3)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(consta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(55, 55, 55))
                    .addComponent(jSeparator4)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(idnt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(erroressintacticos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator5)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addComponent(errorsintactico)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reservada)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(operadors)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comentario)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consta)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idnt)
                    .addComponent(jLabel10))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(erroressintacticos)
                        .addGap(530, 530, 530))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(errorsintactico)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

     public void probarlexico2() throws IOException{ //funcion principal del analizador
        Codigo c = new Codigo(); //llama a la clase principal
        File fichero = new File("fichero.txt"); //crea un fichero con los datos
        PrintWriter writer;
        try{
            writer = new PrintWriter(fichero);
            writer.print(jTextArea1.getText()); //obtiene el texto de textarea1 y guarda en fichero
            writer.close(); 
        }catch (FileNotFoundException ex){
            Logger.getLogger(interfaz.class.getName()).log(Level.SEVERE,null,ex);
        }
        Reader reader;
        reader = new BufferedReader(new FileReader("fichero.txt")); //lee el fichero
        lexer lex = new lexer(reader);
        String Resultado="";
        while(true){
            tok toke = lex.yylex();
            if(toke==null){
                Resultado=Resultado;
                textolexicotxt.setText(Resultado); //imprime en el cuadro 2 de compilado la respuesta
                return;
            }
            switch(toke){
                case ERROR: //si da error muestra el texto en la consola de compilador
                    Resultado=Resultado+" La Expresion es Invalida "+lex.lexeme+" "+" "+" LINEA: "+c.linea+"\n";
                    lineaMala1(); //abre el procedimiento e imprime en label
                    break; //se sale de la condicion
                case ID: case CANTIDAD: //si no da error en ningun lado
                    //muestra el texto en consola compilador
                     Resultado=Resultado +" LEXEMA "+ toke +" "+ " "+" "+" "+" TOKEN "+lex.lexeme+"\n"; 
                    break; //Se sale de la condicion
                default: //si no se encuentra el lexema muestra lo siguiente
                    Resultado = Resultado + " LEXEMA "+toke+" "+" "+" "+" "+" TOKEN "+lex.lexeme+"\n";
                    lineaBuena1();    
            } 
        } 
    } 
    
     public void lineaMala1(){  
          textosintactico.setVisible(true);
            textosintactico.setText("La expresion escrita es invalida revisa la consola de compilación");
       }
    
      public void lineaBuena1(){
          textosintactico.setVisible(true);
         textosintactico.setText("La expresión es válida ¿Quiere agregar otra expresion a analizar?");
      }
    
    
    
    private void jEditorPane2CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jEditorPane2CaretUpdate

    }//GEN-LAST:event_jEditorPane2CaretUpdate

    private void jEditorPane2InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jEditorPane2InputMethodTextChanged

    }//GEN-LAST:event_jEditorPane2InputMethodTextChanged

    private void jEditorPane2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jEditorPane2KeyPressed

    }//GEN-LAST:event_jEditorPane2KeyPressed
 
    
public void simbol(String input) {
    DefaultTableModel model_tabla = new DefaultTableModel(new Object[]{"SIMBOLO", "VALOR"}, 0); // Definir columnas

    try {
        // Mapa para almacenar los nombres de los símbolos
        Map<Integer, String> simbolMap = new HashMap<>();
        Field[] fields = Simbolo.class.getDeclaredFields();
        for (Field field : fields) {
            if (java.lang.reflect.Modifier.isStatic(field.getModifiers()) && field.getType() == int.class) {
                simbolMap.put((Integer) field.get(null), field.getName());
            }
        }

        System.out.println("Mapa de símbolos construido: " + simbolMap);

        // Crear el analizador léxico
        lexico lexer = new lexico(new StringReader(input));
        Symbol symbol;

        // Analizar el texto y obtener los símbolos
        while ((symbol = lexer.next_token()).sym != Simbolo.ERROR) {
            String symbolName = lexer.yytext(); // Obtener el nombre del símbolo (texto del token)
            int symbolValue = symbol.sym; // Obtener el valor del símbolo

            System.out.println("Simbolo: " + symbolName + ", Valor: " + symbolValue);
            model_tabla.addRow(new Object[]{symbolName, symbolValue});
        }

        // Asignar el modelo a jTable2
        jTable2.setModel(model_tabla);
        System.out.println("Tabla actualizada con símbolos.");
    } catch (Exception e) {
        e.printStackTrace();
    }
}

// Método para obtener el texto a analizar
public String obtenerTexto() {
    return textolexicotxt.getText(); // Asumiendo que textolexicotxt es un JTextArea
}

// Definición de la clase Simbolo (asegúrate de que esté completa y correcta)
public static class Simbolo {
    public static final int ERROR = 0;
    public static final int INT = 1;
    public static final int DOUBLE = 2;
    public static final int STRING = 3;
    public static final int IF = 4;
    public static final int SWITCH = 5;
    public static final int FOR = 6;
    public static final int WHILE = 7;
    public static final int DWHILE = 8;
    public static final int REPEAT = 9;
    public static final int CONSOLE = 10;
    public static final int THIS = 11;
    public static final int RETURN = 12;
    public static final int BREAK = 13;
    public static final int PUBLIC = 40;
    public static final int CLASS = 41;
    // operadores
    public static final int MAS = 14;
    public static final int MENOS = 15;
    public static final int POR = 16;
    public static final int DIAGONAL = 17;
    public static final int DMODULAR = 18;
    public static final int IGUALACION = 19;
    public static final int NEGACION = 20;
    public static final int MENORQ = 21;
    public static final int MENORIQ = 22;
    public static final int MAYORQ = 23;
    public static final int MAYORIQ = 24;
    public static final int AND = 25;
    public static final int OR = 26;
    public static final int ADMI = 27;
    public static final int IGUAL = 28;
    public static final int LLAVEA = 29;
    public static final int LLAVEC = 30;
    public static final int PARA = 31;
    public static final int PARC = 32;
    public static final int PCOMA = 33;
    // comentarios
    public static final int COMENTARIOL = 34;
    public static final int COMENTARIOB = 35;
    // identificadores
    public static final int IDENTIFICADOR = 36;
    // constantes
    public static final int ENTERO = 37;
    public static final int DECIMAL = 38;
    public static final int CADENAS = 39;
    public static final int ESPACIO = 45;
    public static final int LINEA = 46;
    public static final int READKEY = 47;
    public static final int READLINE = 48;
    public static final int WRITELINE = 49;
    public static final int PUNTO = 50;
    public static final int PRINT = 51;
    public static final int SYSTEM = 52;
    public static final int OUT = 53;

    // T-SQL keywords
    public static final int TSQL_SELECT = 54;
    public static final int TSQL_FROM = 55;
    public static final int TSQL_WHERE = 56;
    public static final int TSQL_INSERT = 57;
    public static final int TSQL_UPDATE = 58;
    public static final int TSQL_DELETE = 59;
    public static final int TSQL_CREATE = 60;
    public static final int TSQL_DROP = 61;
    public static final int TSQL_ALTER = 62;
    public static final int TSQL_JOIN = 63;

    // Pascal keywords
    public static final int PASCAL_BEGIN = 64;
    public static final int PASCAL_END = 65;
    public static final int PASCAL_VAR = 66;
    public static final int PASCAL_PROGRAM = 67;
    public static final int PASCAL_CONST = 68;
    public static final int PASCAL_IF = 69;
    public static final int PASCAL_ELSE = 70;
    public static final int PASCAL_FOR = 71;
    public static final int PASCAL_WHILE = 72;
    public static final int PASCAL_DO = 73;
    public static final int PASCAL_REPEAT = 74;
    public static final int PASCAL_UNTIL = 75;

    // JavaScript keywords
    public static final int JS_VAR = 76;
    public static final int JS_LET = 77;
    public static final int JS_CONST = 78;
    public static final int JS_FUNCTION = 79;
    public static final int JS_IF = 80;
    public static final int JS_ELSE = 81;
    public static final int JS_FOR = 82;
    public static final int JS_WHILE = 83;
    public static final int JS_DO = 84;
    public static final int JS_SWITCH = 85;
    public static final int JS_CASE = 86;
    public static final int JS_DEFAULT = 87;
    public static final int JS_BREAK = 88;
    public static final int JS_CONTINUE = 89;
    public static final int JS_RETURN = 90;
    public static final int JS_CLASS = 91;
    public static final int JS_EXTENDS = 92;
    public static final int JS_IMPORT = 93;
    public static final int JS_EXPORT = 94;

    // HTML tags
    public static final int HTML_HTML_OPEN = 95;
    public static final int HTML_HTML_CLOSE = 96;
    public static final int HTML_HEAD_OPEN = 97;
    public static final int HTML_HEAD_CLOSE = 98;
    public static final int HTML_BODY_OPEN = 99;
    public static final int HTML_BODY_CLOSE = 100;
    public static final int HTML_TITLE_OPEN = 101;
    public static final int HTML_TITLE_CLOSE = 102;
    public static final int HTML_DIV_OPEN = 103;
    public static final int HTML_DIV_CLOSE = 104;
    public static final int HTML_P_OPEN = 105;
    public static final int HTML_P_CLOSE = 106;

    // Python keywords
    public static final int PYTHON_DEF = 107;
    public static final int PYTHON_CLASS = 108;
    public static final int PYTHON_IF = 109;
    public static final int PYTHON_ELSE = 110;
    public static final int PYTHON_ELIF = 111;
    public static final int PYTHON_FOR = 112;
    public static final int PYTHON_WHILE = 113;
    public static final int PYTHON_IMPORT = 114;
    public static final int PYTHON_FROM = 115;
    public static final int PYTHON_RETURN = 116;
    public static final int PYTHON_BREAK = 117;
    public static final int PYTHON_CONTINUE = 118;
    public static final int PYTHON_PASS = 119;
}

    private void Compilar_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Compilar_btnActionPerformed
        try {
          // Simulación de la interfaz gráfica
          jPanel1.setVisible(true);
          textolexicotxt.setVisible(true);
          textolexicotxt2.setVisible(true);
          textolexicotxt2.setText("Análisis Léxico");

          String input = obtenerTexto(); // Obtener el texto a analizar
          System.out.println("Texto a analizar: " + input);

          // Identificar el lenguaje de programación
          String lenguaje = LanguageIdentifier.identifyLanguage(input);
          System.out.println("Lenguaje identificado: " + lenguaje);

          // Mostrar el tipo de código en el label lblTipoCodigo
          lblTipoCodigo.setText("Tipo de código: " + lenguaje);

          if (!lenguaje.equals("Unknown")) {
              // Realizar el análisis léxico
              System.out.println("Iniciando análisis léxico...");
              simbol(input); // Llamar al método simbol con el texto

              System.out.println("Análisis léxico completado. Iniciando análisis sintáctico...");
              probarlexico2();

              // Realizar el análisis sintáctico
              if (ValidarExpresion()) {
                  erroressintacticos.setText("La fórmula está escrita correctamente.");
              } else {
                  erroressintacticos.setText("¡ERROR!, el código NO está escrito correctamente.");
              }

              // Realizar análisis semántico
              System.out.println("Iniciando análisis semántico...");
              ASTNode ast = generarAST(input);
              SemanticAnalyzer semanticAnalyzer = new SemanticAnalyzer();
              semanticAnalyzer.analyze(ast);

              erroressemanticos.setText("El código no contiene errores semánticos.");
              System.out.println("Análisis semántico completado.");
          } else {
              erroressemanticos.setText("No se puede identificar el tipo de código.");
          }
      } catch (IOException ex) {
          System.out.println("IOException: " + ex.getMessage());
      } catch (Exception ex) {
          System.out.println("Exception: " + ex.getMessage());
          erroressemanticos.setText(ex.getMessage());
      }



    }//GEN-LAST:event_Compilar_btnActionPerformed
  public static ASTNode generarAST(String input) {
        ASLexer lexer = new ASLexer(input);
        ASParser parser = new ASParser(lexer);
        return parser.parseProgram();
    }
     
    private void Errores_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Errores_btnActionPerformed
        // TODO add your handling code here:
           lexico.errores.setVisible(true);
    }//GEN-LAST:event_Errores_btnActionPerformed

    private void lexico_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lexico_btnActionPerformed
        // TODO add your handling code here:
           jPanel1.setVisible(true);
//        textolexico.setVisible(true);
        textolexicotxt.setVisible(true);
        try{
            probarlexico(); //llama a la funcion probarlexer
        }catch(IOException ex){
            System.out.println(ex.getMessage()); //si da error muestra esto
        }
    }//GEN-LAST:event_lexico_btnActionPerformed

    private void guardar_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardar_btnActionPerformed
        // TODO add your handling code here:
           try {
            guardar();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_guardar_btnActionPerformed

    private void guardacomo_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardacomo_btnActionPerformed
        // TODO add your handling code here:
           GuardarComo();
    }//GEN-LAST:event_guardacomo_btnActionPerformed

    private void analizadorsemanticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analizadorsemanticoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_analizadorsemanticoActionPerformed

    private void grd_compi_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grd_compi_btnActionPerformed
        // TODO add your handling code here:
        GuardarComoCompi();
    }//GEN-LAST:event_grd_compi_btnActionPerformed

    private void abrir_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrir_btnActionPerformed
        // TODO add your handling code here:
                 Abrir();
    }//GEN-LAST:event_abrir_btnActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
           Info s= new Info();
        s.setVisible(true); 
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed
        // TODO add your handling code here:
          jPanel1.setVisible(false);
//        textolexico.setVisible(false);
        textolexicotxt.setVisible(false);
        textosintactico.setVisible(false);
        textolexicotxt2.setVisible(false);
        jTextArea1.setText("");
        jEditorPane2.setText("");
        lblTipoCodigo.setText("");
        erroressemanticos.setText("");
    }//GEN-LAST:event_limpiarActionPerformed
 
    public void GuardarComoCompi(){
        String texto = jEditorPane2.getText();//variable para comparacion
        
        if (texto.matches("[[ ]*[\n]*[\t]]*")) {//compara si en el JTextArea hay texto sino muestrtra un mensaje en pantalla
            JOptionPane.showMessageDialog(null,"No hay texto para guardar!", "Error", JOptionPane.ERROR_MESSAGE);
        }else{
            
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("todos los archivos *.txt", "txt","txt"));//filtro para ver solo archivos .legnf
            int seleccion = fileChooser.showSaveDialog(null);
            try{
                if (seleccion == JFileChooser.APPROVE_OPTION){//comprueba si ha presionado el boton de aceptar
                    File JFC = fileChooser.getSelectedFile();
                    String PATH = JFC.getAbsolutePath();//obtenemos el path del archivo a guardar
                    PrintWriter printwriter = new PrintWriter(JFC);
                   String html = jEditorPane2.getText();
                   // html = html.replaceAll("\\<.*?>","");
                    printwriter.print(html);//escribe en el archivo todo lo que se encuentre en el JTextArea
                    printwriter.close();//cierra el archivo
                    
                    //comprobamos si a la hora de guardar obtuvo la extension y si no se la asignamos
                    if(!(PATH.endsWith(".txt"))){
                        File temp = new File(PATH+".txt");
                        JFC.renameTo(temp);
                    }
                    
                    JOptionPane.showMessageDialog(null,"Guardado exitoso!", "Guardado exitoso!", JOptionPane.INFORMATION_MESSAGE);
                }
            }catch (Exception e){//por alguna excepcion salta un mensaje de error
                JOptionPane.showMessageDialog(null,"Error al guardar el archivo!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }    
    }
    
     public void probarlexico() throws IOException{ //funcion principal del analizador
        Codigo c = new Codigo(); //llama a la clase principal
        File fichero = new File("fichero.txt"); //crea un fichero con los datos
        PrintWriter writer;
        try{
            writer = new PrintWriter(fichero);
            writer.print(jTextArea1.getText()); //obtiene el texto de textarea1 y guarda en fichero
            writer.close(); 
        }catch (FileNotFoundException ex){
            Logger.getLogger(interfaz.class.getName()).log(Level.SEVERE,null,ex);
        }
        Reader reader;
        reader = new BufferedReader(new FileReader("fichero.txt")); //lee el fichero
        lexer lex = new lexer(reader);
        String Resultado="";
        while(true){
            tok toke = lex.yylex();
            if(toke==null){
                Resultado=Resultado;
                jEditorPane2.setText(Resultado); //imprime en el cuadro 2 de compilado la respuesta
                return;
            }
            switch(toke){
                 case ERROR: //si da error muestra el texto en la consola de compilador
                    Resultado=Resultado+" La Expresion es Invalida "+lex.lexeme+" "+" "+" LINEA: "+c.linea+"\n";
                    lineaMala(); //abre el procedimiento e imprime en label
                    break; //se sale de la condicion
                case ID: case CANTIDAD: //si no da error en ningun lado
                    //muestra el texto en consola compilador
                     Resultado=Resultado +" LEXEMA "+ toke +" "+ " "+" "+" "+" TOKEN "+lex.lexeme+"\n"; 
                    break; //Se sale de la condicion
                default: //si no se encuentra el lexema muestra lo siguiente
                    Resultado = Resultado + " LEXEMA "+toke+" "+" "+" "+" "+" TOKEN "+lex.lexeme+"\n";
                    lineaBuena();    
            } 
        } 
    } 
     
       public void lineaMala(){  
            textolexicotxt.setText("La expresion escrita es invalida revisa la consola de compilación");
       }
    
      public void lineaBuena(){  
        textolexicotxt.setText("La expresión es válida ¿Quiere agregar otra expresion a analizar?");
      }
     
    public boolean ValidarExpresion() {
        Pila pila = new Pila();
        String cadena = jTextArea1.getText(); 
        for (int i = 0; i < cadena.length(); i++) {
            if (cadena.charAt(i) == '(' || cadena.charAt(i) == '[' || cadena.charAt(i) == '{') {
                pila.Insertar(cadena.charAt(i));
            } else { 
                if (cadena.charAt(i) == ')') { 
                    if (pila.extraer() != '(') {
                        return false;
                    } 
                } else { 
                    if (cadena.charAt(i) == ']') { 
                        if (pila.extraer() != '[') {
                            return false;
                        } 
                    } else { 
                        if (cadena.charAt(i) == '}') {
                            if (pila.extraer() != '{') {
                                return false;
                            }
                        }
                    }
                }
            }
        }
        return pila.PilaVacia();
    }
      
    public void AbrirCompi(){ 
        if(jEditorPane1.getText().equals("")){
        JFileChooser abrir = new JFileChooser();
        abrir.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("txt","txt");
        abrir.setFileFilter(filtro); 
        try
        { 
            int selecciona = abrir.showDialog(jEditorPane1,"Abrir");
            String path = abrir.getSelectedFile().getParent() + "/" + abrir.getSelectedFile().getName();
               //jLabel1.setText(path);
            direccionARCH = path;
            if(selecciona == JFileChooser.APPROVE_OPTION)
            {
                try{
                    File archivo = new File(path);
                    FileReader lector = new FileReader(archivo); 
                    BufferedReader leer = new BufferedReader(new InputStreamReader(new FileInputStream(path), "ISO-8859-1"));
                    String linea = "";
                    String contenido = ""; 
                    while((linea = leer.readLine()) != null )
                    { 
                        contenido += linea +"\n" ; 
                    }
                    leer.close(); 
                    jEditorPane1.setText(contenido); 
                } catch (Exception e) {} 
            } 
        }
        catch (Exception e) {
        } 
        }else
        { 
            interfaz nuevo = new interfaz();
            nuevo.setVisible(true);
            JFileChooser abrir = new JFileChooser();
            abrir.setFileSelectionMode(JFileChooser.FILES_ONLY);
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("txt","txt");
            abrir.setFileFilter(filtro);
        try
        {
            int selecciona = abrir.showDialog(jEditorPane1,"Abrir");
            String path = abrir.getSelectedFile().getParent() + "/" + abrir.getSelectedFile().getName();
               //jLabel1.setText(path);
            direccionARCH = path;
            if(selecciona == JFileChooser.APPROVE_OPTION)
            {
                try{
                    File archivo = new File(path);
                    FileReader lector = new FileReader(archivo);
                    BufferedReader leer = new BufferedReader(new InputStreamReader(new FileInputStream(path), "8859_1"));
                    String linea = "";
                    String contenido = "";
                    while((linea = leer.readLine()) != null )
                    {
                        contenido += linea +"\n" ;
                    }
                    leer.close();
                    nuevo.jEditorPane1.setText(contenido);
                } catch (Exception e) { }
            }
        }
        catch (Exception e) {
        }
        }
    }
    
     public void guardar() throws FileNotFoundException
     {
         FileWriter fichero = null;
         PrintWriter pw = null;
         try
         {
             fichero = new FileWriter(direccionARCH);
             pw = new PrintWriter(fichero);
             pw.write(jTextArea1.getText());
         } catch (Exception e) 
         {
             e.printStackTrace();
         } finally {
             try 
             {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
                if (null != fichero) 
                    fichero.close();
             } catch (Exception e2) {
                 e2.printStackTrace();
             }
         }
    }
    
    public void GuardarComo()
    {
        String texto = jTextArea1.getText();//variable para comparacion
        
        if (texto.matches("[[ ]*[\n]*[\t]]*")) {//compara si en el JTextArea hay texto sino muestrtra un mensaje en pantalla
            JOptionPane.showMessageDialog(null,"No hay texto para guardar!", "Error", JOptionPane.ERROR_MESSAGE);
        }else{
            
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("todos los archivos *.txt", "txt","txt"));//filtro para ver solo archivos .legnf
            int seleccion = fileChooser.showSaveDialog(null);
            try{
                if (seleccion == JFileChooser.APPROVE_OPTION){//comprueba si ha presionado el boton de aceptar
                    File JFC = fileChooser.getSelectedFile();
                    String PATH = JFC.getAbsolutePath();//obtenemos el path del archivo a guardar
                    PrintWriter printwriter = new PrintWriter(JFC);
                    printwriter.print(jTextArea1.getText());//escribe en el archivo todo lo que se encuentre en el JTextArea
                    printwriter.close();//cierra el archivo
                    
                    //comprobamos si a la hora de guardar obtuvo la extension y si no se la asignamos
                    if(!(PATH.endsWith(".txt"))){
                        File temp = new File(PATH+".txt");
                        JFC.renameTo(temp);
                    }
                    
                    JOptionPane.showMessageDialog(null,"Guardado exitoso!", "Guardado exitoso!", JOptionPane.INFORMATION_MESSAGE);
                }
            }catch (Exception e){//por alguna excepcion salta un mensaje de error
                JOptionPane.showMessageDialog(null,"Error al guardar el archivo!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }    
    }
   
    
    public void Guardar() throws FileNotFoundException{ 
        FileWriter fichero = null;
        PrintWriter pw = null;
        try
        {
            fichero = new FileWriter(direccionARCH);
            pw = new PrintWriter(fichero);
            pw.write(jTextArea1.getText());
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }
    }
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
 /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new interfaz().setVisible(true);
            }
        });
       
    }
    
public void probarLexerFile() throws IOException{ 
            reser =0; op =0; coment=0; ident = 0; constantes=0;
            lexico.contador=0;
            lexico.columnas.clear();
            lexico.filas.clear();
            lexico.carac.clear();
            DefaultListModel filas = new DefaultListModel();
            DefaultListModel columnas = new DefaultListModel();
            DefaultListModel carac = new DefaultListModel();
            errores.jList1.setModel(carac);
            errores.jList2.setModel(filas);
            errores.jList3.setModel(columnas);
          String contenido=jTextArea1.getText();
          //contenido = contenido.replace('/<([^<>]+)>/e', '"<" .str_replace("&quot;", \'"\', "$1").">"', contenido);
          System.out.println(contenido);
          contenido = contenido.replace("<html>", "");
         // contenido = contenido.replace("\r","");
          //contenido = contenido.replace("\n","");
          contenido = contenido.replace("<head>", "");
          contenido = contenido.replace("</head>", "");
          contenido = contenido.replace("<body>", "");
          contenido = contenido.replace("<p style=\"margin-top: 0\">", "");
          contenido = contenido.replace("<br>", "");
          contenido = contenido.replace("&#168;", "¨");
          contenido = contenido.replace("&#161;", "¡");
          contenido = contenido.replace("&#191;", "¿");
          contenido = contenido.replace("&#176;", "°");
          contenido = contenido.replace("&#172;", "¬");
          contenido = contenido.replace("&amp;", "&");
          contenido = contenido.replace("</p>", "");
          contenido = contenido.replace("</html>", "");
          contenido = contenido.replace("</body>", "");
          contenido = contenido.replace("&quot;", "\"");
         System.out.println(contenido);
    
        //Instance del Scanner
        lexico scan1 = new lexico(new BufferedReader( new StringReader(contenido)));
        Symbol sim=scan1.next_token();
        String texto="";
        jEditorPane2.setText("");
        texto += "<html> <head> </head> <body> <p style=\"margin-top: 0\">";
        while(sim.sym!=0)
        {
            String token = (String) sim.value;
            String obt = (String) sim.value;
        if(sim.sym >0 && sim.sym <14 || sim.sym==40 || sim.sym ==41 || sim.sym >46 && sim.sym <=116 ){
            // Reservadas AZUL
            texto +="<font color=blue>"+ obt +"</font>&nbsp";
            reser++;        
        }else if(sim.sym >13 && sim.sym<34){ ///operadores cyan
            if(sim.sym==21){ //si es igual a menor que
            texto +="<font color=cyan>&lt</font>&nbsp";
            op++;
        }else{
            texto +="<font color=cyan>"+ obt +"</font>&nbsp";
            op++;
        }
            if(sim.sym == 29 || sim.sym ==33||sim.sym ==30){ 
            //29 (llavea), 33(pcoma), 30 (llavecerrar)
            texto += "<BR>";
            } 
        }else if(sim.sym ==34 || sim.sym==35){
        //comentarios GRIS
          texto +="<font color=gray>"+ obt +"</font><BR>\n";
          coment++;
        }else if(sim.sym == 36){ 
        //identificadores ROJO
            texto +="<font color=red>"+ obt +"</font>&nbsp\n";
            ident++; 
        }else if(sim.sym >36 && sim.sym<40){ 
        //constantes VERDE
          texto +="<font color=green>"+ obt +"</font>&nbsp\n";
          constantes++;
        }else if(sim.sym ==45){ //ESPACIO
          texto +="\r"; 
        }else if(sim.sym ==46){ //linea
          texto +="\n";  
        }else{ 
            texto += sim.value+"<BR>"; 
        }
        System.out.println(token+" "+sim.sym+" "); 
        sim=scan1.next_token();
        }
        jLabel2.setText(""+reser);
        jLabel4.setText(""+op);
        jLabel6.setText(""+coment);
        jLabel8.setText(""+constantes);
        jLabel10.setText(""+ident);
        texto+= "</p>  </body></html>";
        System.out.println(texto);
        jEditorPane2.setText(texto);
}

    public void Abrir()
    {
        if(jTextArea1.getText().equals("")){
        JFileChooser abrir = new JFileChooser();
        abrir.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("txt","txt");
        abrir.setFileFilter(filtro);

        try
        {

            int selecciona = abrir.showDialog(jTextArea1,"Abrir");
            String path = abrir.getSelectedFile().getParent() + "/" + abrir.getSelectedFile().getName();
               //jLabel1.setText(path);
            direccionARCH = path;
            if(selecciona == JFileChooser.APPROVE_OPTION)
            {
                try{
                    File archivo = new File(path);
                    FileReader lector = new FileReader(archivo);
                    
                    BufferedReader leer = new BufferedReader(new InputStreamReader(new FileInputStream(path), "ISO-8859-1"));
                    String linea = "";
                    String contenido = "";
                    
                    while((linea = leer.readLine()) != null )
                    {
                        
                        contenido += linea +"\n" ;

                    }
                    leer.close();
                    contenido = contenido.replace("ï»¿", "");
                    contenido = contenido.replace("Ã©", "é");
                    contenido = contenido.replace("Ãº", "ú");
                    contenido = contenido.replace("Ã­", "í");
                    contenido = contenido.replace("Ã³", "ó");
                    contenido = contenido.replace("Ã¡", "á");
                    jTextArea1.setText(contenido);
                } catch (Exception e) { }
            }
        }
        catch (Exception e) {
        }
        }else{
        interfaz nuevo = new interfaz();
        nuevo.setVisible(true);
         JFileChooser abrir = new JFileChooser();
        abrir.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("txt","txt");
        abrir.setFileFilter(filtro);
        try
        {
            int selecciona = abrir.showDialog(jTextArea1,"Abrir");
            String path = abrir.getSelectedFile().getParent() + "/" + abrir.getSelectedFile().getName();
               //jLabel1.setText(path);
            direccionARCH = path;
            if(selecciona == JFileChooser.APPROVE_OPTION)
            {
                try{
                    File archivo = new File(path);
                    FileReader lector = new FileReader(archivo);
                    
                    BufferedReader leer = new BufferedReader(new InputStreamReader(new FileInputStream(path), "ISO-8859-1"));
                    String linea = "";
                    String contenido = "";
                    
                    while((linea = leer.readLine()) != null )
                    {
                        contenido += linea +"\n" ;
                    }
                    leer.close();
                    nuevo.jTextArea1.setText(contenido);
                } catch (Exception e) { }
            }
        }
        catch (Exception e) {
        }
        }
    }
    
     

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Compilar_btn;
    private javax.swing.JMenuItem Errores_btn;
    private javax.swing.JMenuItem abrir_btn;
    private javax.swing.JMenuItem analizadorsemantico;
    private javax.swing.JLabel comentario;
    private javax.swing.JLabel consta;
    private javax.swing.JTextArea erroressemanticos;
    private javax.swing.JLabel erroressintacticos;
    private javax.swing.JLabel errorsintactico;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JMenuItem grd_compi_btn;
    private javax.swing.JMenuItem guardacomo_btn;
    private javax.swing.JMenuItem guardar_btn;
    private javax.swing.JLabel idnt;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JEditorPane jEditorPane2;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblTipoCodigo;
    private javax.swing.JMenuItem lexico_btn;
    private javax.swing.JMenuItem limpiar;
    private javax.swing.JMenu menuarchivop;
    private javax.swing.JLabel operadors;
    private javax.swing.JLabel qwqw;
    private javax.swing.JLabel reservada;
    private javax.swing.JLabel sdsd;
    private javax.swing.JLabel textolexico1;
    private javax.swing.JLabel textolexico2;
    private javax.swing.JLabel textolexico3;
    private javax.swing.JTextArea textolexicotxt;
    private javax.swing.JLabel textolexicotxt2;
    private javax.swing.JTextArea textosintactico;
    // End of variables declaration//GEN-END:variables
}
