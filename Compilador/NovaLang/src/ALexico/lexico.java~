/* The following code was generated by JFlex 1.4.3 on 6/05/20 03:32 PM */

package ALexico;
import ALexico.Visuales.*;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import JFlex.sym;
import java.io.FileWriter;
import java.io.PrintWriter;
import javax.swing.DefaultListModel;

             

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/05/20 03:32 PM from the specification file
 * <tt>C:/Users/Juanc/Documents/NetBeansProjects/Analizador lexico/src/ALexico/lexico.flex</tt>
 */
public class lexico implements java_cup.runtime.Scanner {
 public static DefaultListModel filas = new DefaultListModel();
   public static DefaultListModel columnas = new DefaultListModel();
   public static DefaultListModel carac = new DefaultListModel();
    
   // errores
   public static ErrorLinea errores = new ErrorLinea();
     String error ="<table border=\"1\" cellpadding=\"0\" cellspacing=\"0\"><tr><td>  No.  </td><td>  Caracter  </td><td>  Fila  </td><td>  Columna  </td></tr>";
    public static int contador;
  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     7,  7,  7,  7,  7,  7,  7,  7,  7,  3,  2,  0,  3,  1,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  0,  0,  0,  0, 
    30, 45, 17,  0,  6, 43, 48,  0, 52, 53,  5, 41,  0, 42, 16,  4, 
     8,  9,  9,  9,  9,  9,  9,  9,  9,  9,  0, 54, 46, 44, 47,  0, 
     0,  6,  6, 33,  6, 10,  6,  6,  6,  6,  6,  6, 37,  6,  6,  6, 
    40,  6, 34, 23,  6,  6,  6, 38,  6,  6,  6,  0,  0,  0,  0,  6, 
     0, 32, 21, 28, 19, 13, 25, 24, 29, 18,  6, 35, 22, 39, 11, 15, 
    31,  6, 14, 26, 12, 20,  6, 27,  6, 36,  6, 50, 49, 51,  0,  7, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
     0,  0,  6,  6,  6,  6,  0,  0,  0,  0,  6,  0,  0,  7,  0,  0, 
     0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  0,  6,  6,  6,  6,  6,  6,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  0,  6,  6,  6,  6,  6,  6,  6,  6
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\2\7"+
    "\4\6\1\10\1\1\14\6\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\2\1\1\20\1\21\1\22\1\23"+
    "\1\24\2\0\4\6\1\0\1\6\1\25\15\6\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\2\34\2\0\4\6"+
    "\1\35\1\36\1\37\1\6\1\0\2\6\1\40\11\6"+
    "\1\0\1\41\1\6\1\42\3\6\1\0\17\6\1\0"+
    "\1\43\3\6\1\44\2\6\1\45\5\6\1\46\1\47"+
    "\1\50\1\0\1\51\1\52\1\53\5\6\1\54\2\0"+
    "\1\55\1\56\1\57\2\6\1\0\1\60\1\61\1\6"+
    "\1\0\1\62\3\0\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\245\0\334\0\67\0\u0113"+
    "\0\67\0\u014a\0\u0181\0\u01b8\0\u01ef\0\u0226\0\67\0\u025d"+
    "\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415"+
    "\0\u044c\0\u0483\0\u04ba\0\u04f1\0\67\0\67\0\67\0\u0528"+
    "\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\67\0\67\0\67"+
    "\0\67\0\67\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785"+
    "\0\u07bc\0\u07f3\0\u0113\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906"+
    "\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe"+
    "\0\67\0\67\0\67\0\67\0\67\0\67\0\u0af5\0\67"+
    "\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0113\0\u07bc"+
    "\0\u0113\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0113\0\u0d52\0\u0d89"+
    "\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41"+
    "\0\67\0\u0f78\0\u0113\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b"+
    "\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243"+
    "\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u0113"+
    "\0\u13fb\0\u1432\0\u1469\0\u0113\0\u14a0\0\u14d7\0\u0113\0\u150e"+
    "\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u0113\0\u0113\0\u0113\0\u1621"+
    "\0\u0113\0\u0113\0\u0113\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734"+
    "\0\u0113\0\u176b\0\u17a2\0\u0113\0\u0113\0\u0113\0\u17d9\0\u1810"+
    "\0\u1847\0\67\0\u0113\0\u187e\0\u18b5\0\u0113\0\u18ec\0\u1923"+
    "\0\u195a\0\67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\10\1\14\1\10\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\10\1\23\1\10\1\24"+
    "\1\10\1\25\1\26\1\27\2\10\1\5\1\30\1\10"+
    "\1\31\1\32\3\10\1\33\1\10\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\70\0\1\5\1\4\1\5"+
    "\32\0\1\5\31\0\3\5\32\0\1\5\34\0\1\53"+
    "\1\54\67\0\12\10\2\0\14\10\1\0\12\10\26\0"+
    "\2\12\63\0\5\10\1\55\4\10\2\0\14\10\1\0"+
    "\12\10\24\0\12\10\2\0\13\10\1\56\1\0\12\10"+
    "\24\0\7\10\1\57\2\10\2\0\14\10\1\0\12\10"+
    "\24\0\12\10\2\0\2\10\1\60\11\10\1\0\12\10"+
    "\16\0\2\61\1\0\64\61\6\0\5\10\1\62\4\10"+
    "\2\0\7\10\1\63\4\10\1\0\12\10\24\0\11\10"+
    "\1\64\2\0\14\10\1\0\12\10\24\0\10\10\1\65"+
    "\1\10\2\0\14\10\1\0\12\10\24\0\6\10\1\66"+
    "\3\10\2\0\14\10\1\0\12\10\24\0\11\10\1\67"+
    "\2\0\14\10\1\0\12\10\24\0\12\10\2\0\11\10"+
    "\1\70\2\10\1\0\5\10\1\71\4\10\24\0\12\10"+
    "\2\0\13\10\1\72\1\0\12\10\24\0\10\10\1\73"+
    "\1\10\2\0\14\10\1\0\12\10\24\0\11\10\1\74"+
    "\2\0\4\10\1\75\7\10\1\0\12\10\24\0\7\10"+
    "\1\76\2\10\2\0\14\10\1\0\12\10\24\0\10\10"+
    "\1\77\1\10\2\0\14\10\1\0\12\10\24\0\12\10"+
    "\2\0\2\10\1\100\11\10\1\0\12\10\72\0\1\101"+
    "\66\0\1\102\66\0\1\103\66\0\1\104\72\0\1\105"+
    "\67\0\1\106\5\0\1\53\1\107\1\110\64\53\5\111"+
    "\1\112\61\111\6\0\6\10\1\113\3\10\2\0\14\10"+
    "\1\0\12\10\24\0\12\10\2\0\1\114\13\10\1\0"+
    "\12\10\24\0\6\10\1\115\3\10\2\0\14\10\1\0"+
    "\1\116\11\10\24\0\6\10\1\117\3\10\2\0\14\10"+
    "\1\0\12\10\16\0\2\61\1\0\16\61\1\120\45\61"+
    "\6\0\6\10\1\121\3\10\2\0\14\10\1\0\12\10"+
    "\24\0\12\10\2\0\2\10\1\122\11\10\1\123\12\10"+
    "\24\0\7\10\1\124\2\10\2\0\14\10\1\0\12\10"+
    "\24\0\10\10\1\125\1\10\2\0\14\10\1\0\12\10"+
    "\24\0\10\10\1\126\1\10\2\0\14\10\1\0\12\10"+
    "\24\0\12\10\2\0\1\127\13\10\1\0\12\10\24\0"+
    "\12\10\2\0\10\10\1\130\3\10\1\0\12\10\24\0"+
    "\12\10\2\0\1\131\13\10\1\0\12\10\24\0\12\10"+
    "\2\0\1\132\13\10\1\0\12\10\24\0\5\10\1\133"+
    "\4\10\2\0\14\10\1\0\12\10\24\0\12\10\2\0"+
    "\14\10\1\0\1\10\1\134\10\10\24\0\12\10\2\0"+
    "\14\10\1\0\1\10\1\135\10\10\24\0\12\10\2\0"+
    "\1\136\13\10\1\0\12\10\24\0\12\10\2\0\3\10"+
    "\1\137\10\10\1\0\12\10\20\0\1\110\64\0\5\111"+
    "\1\140\61\111\4\0\1\141\1\112\67\0\7\10\1\142"+
    "\2\10\2\0\14\10\1\0\12\10\24\0\12\10\2\0"+
    "\10\10\1\143\3\10\1\0\12\10\24\0\12\10\2\0"+
    "\2\10\1\144\11\10\1\0\12\10\24\0\7\10\1\145"+
    "\2\10\2\0\14\10\1\0\12\10\24\0\12\10\2\0"+
    "\3\10\1\146\10\10\1\0\12\10\51\0\1\147\41\0"+
    "\12\10\2\0\14\10\1\0\1\10\1\150\10\10\24\0"+
    "\12\10\2\0\1\151\13\10\1\0\12\10\24\0\6\10"+
    "\1\152\3\10\2\0\14\10\1\0\12\10\24\0\6\10"+
    "\1\153\3\10\2\0\14\10\1\0\12\10\24\0\12\10"+
    "\2\0\4\10\1\154\7\10\1\0\12\10\24\0\5\10"+
    "\1\155\4\10\2\0\14\10\1\0\12\10\24\0\12\10"+
    "\2\0\10\10\1\156\3\10\1\0\12\10\24\0\12\10"+
    "\2\0\10\10\1\157\3\10\1\0\12\10\24\0\12\10"+
    "\2\0\1\10\1\160\12\10\1\0\12\10\24\0\6\10"+
    "\1\161\3\10\2\0\14\10\1\0\12\10\24\0\12\10"+
    "\2\0\4\10\1\162\7\10\1\0\12\10\16\0\4\111"+
    "\1\141\1\140\61\111\6\0\10\10\1\163\1\10\2\0"+
    "\14\10\1\0\12\10\24\0\10\10\1\164\1\10\2\0"+
    "\14\10\1\0\12\10\24\0\12\10\2\0\14\10\1\0"+
    "\1\10\1\165\10\10\24\0\12\10\2\0\4\10\1\166"+
    "\7\10\1\0\12\10\53\0\1\167\37\0\12\10\2\0"+
    "\14\10\1\0\4\10\1\170\5\10\24\0\5\10\1\171"+
    "\4\10\2\0\14\10\1\0\12\10\24\0\12\10\2\0"+
    "\12\10\1\172\1\10\1\0\12\10\24\0\7\10\1\173"+
    "\2\10\2\0\14\10\1\0\12\10\24\0\7\10\1\174"+
    "\2\10\2\0\14\10\1\0\12\10\24\0\6\10\1\175"+
    "\3\10\2\0\14\10\1\0\12\10\24\0\11\10\1\176"+
    "\2\0\14\10\1\0\12\10\24\0\12\10\2\0\10\10"+
    "\1\177\3\10\1\0\12\10\24\0\12\10\2\0\14\10"+
    "\1\0\4\10\1\200\1\10\1\201\3\10\24\0\7\10"+
    "\1\202\2\10\2\0\14\10\1\0\12\10\24\0\12\10"+
    "\2\0\1\203\13\10\1\0\12\10\24\0\11\10\1\204"+
    "\2\0\14\10\1\0\12\10\24\0\5\10\1\205\4\10"+
    "\2\0\14\10\1\0\12\10\24\0\6\10\1\206\3\10"+
    "\2\0\14\10\1\0\12\10\24\0\7\10\1\207\2\10"+
    "\2\0\14\10\1\0\12\10\40\0\1\210\52\0\12\10"+
    "\2\0\6\10\1\211\5\10\1\0\12\10\24\0\12\10"+
    "\2\0\13\10\1\212\1\0\12\10\24\0\12\10\2\0"+
    "\14\10\1\0\10\10\1\213\1\10\24\0\12\10\2\0"+
    "\4\10\1\214\7\10\1\0\12\10\24\0\12\10\2\0"+
    "\4\10\1\215\7\10\1\0\12\10\24\0\7\10\1\216"+
    "\2\10\2\0\14\10\1\0\12\10\24\0\12\10\2\0"+
    "\1\217\13\10\1\0\12\10\24\0\12\10\2\0\14\10"+
    "\1\0\6\10\1\220\3\10\24\0\12\10\2\0\12\10"+
    "\1\221\1\10\1\0\12\10\24\0\12\10\1\222\1\0"+
    "\14\10\1\0\12\10\44\0\1\223\46\0\5\10\1\224"+
    "\4\10\2\0\14\10\1\0\12\10\24\0\7\10\1\225"+
    "\2\10\2\0\14\10\1\0\12\10\24\0\12\10\2\0"+
    "\14\10\1\0\5\10\1\226\4\10\24\0\5\10\1\227"+
    "\4\10\2\0\14\10\1\0\12\10\24\0\12\10\2\0"+
    "\1\230\13\10\1\0\12\10\30\0\1\231\71\0\1\232"+
    "\57\0\7\10\1\233\2\10\2\0\14\10\1\0\12\10"+
    "\24\0\5\10\1\234\4\10\2\0\14\10\1\0\12\10"+
    "\31\0\1\235\61\0\7\10\1\236\2\10\2\0\14\10"+
    "\1\0\12\10\32\0\1\237\67\0\1\240\67\0\1\241"+
    "\67\0\1\242\47\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6545];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\1\1\1\11\5\1\1\11"+
    "\15\1\3\11\6\1\5\11\2\0\4\1\1\0\17\1"+
    "\6\11\1\1\1\11\2\0\10\1\1\0\14\1\1\0"+
    "\1\11\5\1\1\0\17\1\1\0\20\1\1\0\11\1"+
    "\2\0\5\1\1\0\1\11\2\1\1\0\1\1\3\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    
    StringBuffer string = new StringBuffer();
    
    private Symbol symbol(int type){

    return new Symbol(type, yyline, yycolumn);
    
    }
    
    private Symbol symbol(int type, Object value){
    
    return new Symbol(type, yyline, yycolumn);

    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public lexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { return new Symbol(Simbolo.NEGACION, yyline, yychar,  new String(yytext()));
          }
        case 52: break;
        case 50: 
          { return new Symbol(Simbolo.WRITELINE, yyline, yychar,  new String(yytext()));
          }
        case 53: break;
        case 43: 
          { return new Symbol(Simbolo.SYSTEM, yyline, yychar,  new String(yytext()));
          }
        case 54: break;
        case 47: 
          { return new Symbol(Simbolo.READKEY, yyline, yychar,  new String(yytext()));
          }
        case 55: break;
        case 37: 
          { return new Symbol(Simbolo.CLASS, yyline, yychar,  new String(yytext()));
          }
        case 56: break;
        case 41: 
          { return new Symbol(Simbolo.STRING, yyline, yychar,  new String(yytext()));
          }
        case 57: break;
        case 12: 
          { return new Symbol(Simbolo.IGUAL, yyline, yychar,  new String(yytext()));
          }
        case 58: break;
        case 10: 
          { return new Symbol(Simbolo.MENOS, yyline, yychar,  new String(yytext()));
          }
        case 59: break;
        case 31: 
          { return new Symbol(Simbolo.INT, yyline, yychar,  new String(yytext()));
          }
        case 60: break;
        case 35: 
          { return new Symbol(Simbolo.BREAK, yyline, yychar,  new String(yytext()));
          }
        case 61: break;
        case 2: 
          { //yychar=0; yyline=0
          }
        case 62: break;
        case 18: 
          { return new Symbol(Simbolo.PARA, yyline, yychar,  new String(yytext()));
          }
        case 63: break;
        case 16: 
          { return new Symbol(Simbolo.LLAVEA, yyline, yychar,  new String(yytext()));
          }
        case 64: break;
        case 38: 
          { return new Symbol(Simbolo.RETURN, yyline, yychar,  new String(yytext()));
          }
        case 65: break;
        case 27: 
          { return new Symbol(Simbolo.OR, yyline, yychar,  new String(yytext()));
          }
        case 66: break;
        case 34: 
          { return new Symbol(Simbolo.THIS, yyline, yychar,  new String(yytext()));
          }
        case 67: break;
        case 36: 
          { return new Symbol(Simbolo.WHILE, yyline, yychar,  new String(yytext()));
          }
        case 68: break;
        case 21: 
          { return new Symbol(Simbolo.IF, yyline, yychar,  new String(yytext()));
          }
        case 69: break;
        case 30: 
          { return new Symbol(Simbolo.CADENAS, yyline, yychar,  new String(yytext()));
          }
        case 70: break;
        case 20: 
          { return new Symbol(Simbolo.PCOMA, yyline, yychar,  new String(yytext()));
          }
        case 71: break;
        case 49: 
          { return new Symbol(Simbolo.READLINE, yyline, yychar,  new String(yytext()));
          }
        case 72: break;
        case 51: 
          { return new Symbol(Simbolo.DECIMAL, yyline, yychar,  new String(yytext()));
          }
        case 73: break;
        case 29: 
          { return new Symbol(Simbolo.OUT, yyline, yychar,  new String(yytext()));
          }
        case 74: break;
        case 33: 
          { return new Symbol(Simbolo.COMENTARIOB, yyline, yychar,  new String(yytext()));
          }
        case 75: break;
        case 5: 
          { return new Symbol(Simbolo.POR, yyline, yychar,  new String(yytext()));
          }
        case 76: break;
        case 48: 
          { return new Symbol(Simbolo.DWHILE, yyline, yychar,  new String(yytext()));
          }
        case 77: break;
        case 14: 
          { return new Symbol(Simbolo.MENORQ, yyline, yychar,  new String(yytext()));
          }
        case 78: break;
        case 22: 
          { return new Symbol(Simbolo.IGUALACION, yyline, yychar,  new String(yytext()));
          }
        case 79: break;
        case 13: 
          { return new Symbol(Simbolo.ADMI, yyline, yychar,  new String(yytext()));
          }
        case 80: break;
        case 39: 
          { return new Symbol(Simbolo.REPEAT, yyline, yychar,  new String(yytext()));
          }
        case 81: break;
        case 8: 
          { return new Symbol(Simbolo.PUNTO, yyline, yychar,  new String(yytext()));
          }
        case 82: break;
        case 32: 
          { return new Symbol(Simbolo.FOR, yyline, yychar,  new String(yytext()));
          }
        case 83: break;
        case 7: 
          { return new Symbol(Simbolo.ENTERO, yyline, yychar,  new String(yytext()));
          }
        case 84: break;
        case 26: 
          { return new Symbol(Simbolo.AND, yyline, yychar,  new String(yytext()));
          }
        case 85: break;
        case 46: 
          { return new Symbol(Simbolo.CONSOLE, yyline, yychar,  new String(yytext()));
          }
        case 86: break;
        case 28: 
          { return new Symbol(Simbolo.COMENTARIOL, yyline, yychar,  new String(yytext()));
          }
        case 87: break;
        case 1: 
          { System.out.println("error lexico en la fila "+yyline +" y en la columna " + yychar);
          contador++;      
          

                error += "<tr><td> "+contador+" </td><td>  "+yytext()+"  </td><td>  "+yyline+"  </td><td>  "+yycolumn+"  </td></tr>";
              
                filas.addElement(yyline);
                errores.jList2.setModel(filas);
                columnas.addElement(yycolumn);
                errores.jList3.setModel(columnas);
                carac.addElement(yytext());
                errores.jList1.setModel(carac);
                
                  FileWriter fichero = null;
            PrintWriter pw = null;
            try
            {
                fichero = new FileWriter("errores.html");
                pw = new PrintWriter(fichero);
                pw.write(error);
            
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }
        
     
//interfaz.rotular("error lexico :"+  yytext()+" en la fila "+yyline +" y en la columna " + yycolumn);
          }
        case 88: break;
        case 45: 
          { return new Symbol(Simbolo.PRINT, yyline, yychar,  new String(yytext()));
          }
        case 89: break;
        case 40: 
          { return new Symbol(Simbolo.DOUBLE, yyline, yychar,  new String(yytext()));
          }
        case 90: break;
        case 3: 
          { 
              return new Symbol(Simbolo.DIAGONAL, yyline, yychar,  new String(yytext()));
          }
        case 91: break;
        case 25: 
          { return new Symbol(Simbolo.MAYORIQ, yyline, yychar,  new String(yytext()));
          }
        case 92: break;
        case 11: 
          { return new Symbol(Simbolo.DMODULAR, yyline, yychar,  new String(yytext()));
          }
        case 93: break;
        case 4: 
          { return new Symbol(Simbolo.DIAGONAL, yyline, yychar,  new String(yytext()));
          }
        case 94: break;
        case 9: 
          { return new Symbol(Simbolo.MAS, yyline, yychar,  new String(yytext()));
          }
        case 95: break;
        case 24: 
          { return new Symbol(Simbolo.MENORIQ, yyline, yychar,  new String(yytext()));
          }
        case 96: break;
        case 42: 
          { return new Symbol(Simbolo.SWITCH, yyline, yychar,  new String(yytext()));
          }
        case 97: break;
        case 19: 
          { return new Symbol(Simbolo.PARC, yyline, yychar,  new String(yytext()));
          }
        case 98: break;
        case 17: 
          { return new Symbol(Simbolo.LLAVEC, yyline, yychar,  new String(yytext()));
          }
        case 99: break;
        case 44: 
          { return new Symbol(Simbolo.PUBLIC, yyline, yychar,  new String(yytext()));
          }
        case 100: break;
        case 6: 
          { return new Symbol(Simbolo.IDENTIFICADOR, yyline, yychar,  new String(yytext()));
          }
        case 101: break;
        case 15: 
          { return new Symbol(Simbolo.MAYORQ, yyline, yychar,  new String(yytext()));
          }
        case 102: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
